using BarbarianSim.Aspects;
using BarbarianSim.Config;
using BarbarianSim.Enums;
using FluentAssertions;
using Moq;
using Xunit;

namespace BarbarianSim.Tests.Aspects;

public class ExploitersAspectTests
{
    private readonly Mock<SimLogger> _mockSimLogger = TestHelpers.CreateMock<SimLogger>();
    private readonly SimulationState _state = new SimulationState(new SimulationConfig());
    private readonly ExploitersAspect _aspect;

    public ExploitersAspectTests()
    {
        _aspect = new ExploitersAspect(_mockSimLogger.Object) { Damage = 25 };
        _state.Config.Gear.Helm.Aspect = _aspect;
    }

    [Fact]
    public void GetDamageBonus_When_Active()
    {
        _state.Enemies.First().Auras.Add(Aura.Unstoppable);
        _aspect.GetDamageBonus(_state, _state.Enemies.First()).Should().Be(1.25);
    }

    [Fact]
    public void GetDamageBonus_Returns_1_When_Not_Equipped()
    {
        _state.Config.Gear.Helm.Aspect = null;
        _state.Enemies.First().Auras.Add(Aura.Unstoppable);

        _aspect.GetDamageBonus(_state, _state.Enemies.First()).Should().Be(1.0);
    }

    [Fact]
    public void GetDamageBonus_Returns_1_When_No_Unstoppable_Aura()
    {
        _aspect.GetDamageBonus(_state, _state.Enemies.First()).Should().Be(1.0);
    }

    [Fact]
    public void GetCrowdControlDuration_When_Active()
    {
        _aspect.GetCrowdControlDuration(_state).Should().Be(20);
    }

    [Fact]
    public void GetCrowdControlDuration_Returns_0_When_Not_Equipped()
    {
        _state.Config.Gear.Helm.Aspect = null;
        _aspect.GetCrowdControlDuration(_state).Should().Be(0.0);
    }
}
